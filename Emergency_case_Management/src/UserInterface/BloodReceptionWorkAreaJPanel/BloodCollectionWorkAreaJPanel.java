
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.BloodReceptionWorkAreaJPanel;

import Business.Business;
import Business.Camp.Camp;
import Business.Enterprise.Enterprise;
import Business.Organisation.BloodCollectionOrganization;
import Business.Organisation.BloodbankReceptionOrganization;
import Business.Organisation.Organization;
//import Business.RequestBloodWorkQueue.GetBloodWorkRequest;
import Business.RequestBloodWorkQueue.RequestBloodWorkRequest;
import Business.UserAccount.UserAccount;
//import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.BloodCollectionWorkRequest;
import Business.WorkQueue.GetBloodFromCollectionWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author puja_
 */
public class BloodCollectionWorkAreaJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount account;
    private Enterprise enterprise;
   // private BloodCollectionOrganization bloodorganization;
    private Business business;
   // private GetBloodFromCollectionWorkRequest bloodrequest;
private Organization organization;
    private BloodCollectionOrganization bloodCollectionOrganization;

    /**
     * Creates new form BloodCollectionWorkAreaJPanel
     */
    public BloodCollectionWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,  Business business,Enterprise enterprise) {
        initComponents();
        this.userProcessContainer= userProcessContainer;
        this.account= account;
        this.business = business;
        this.organization = organization;
        this.enterprise = enterprise;
        this.bloodCollectionOrganization = (BloodCollectionOrganization)organization;
        populateBloodbankInventoryTable();
         populateTable();

    }
   
    
    public void populateBloodbankInventoryTable(){
        DefaultTableModel dtm = (DefaultTableModel)bloodinventoryJTable.getModel();
        dtm.setRowCount(0);
        
        for(Camp camp : bloodCollectionOrganization.getCollectionList()){
            Object[] row = new Object[2];
            row[0] = camp.getBloodType();
            row[1] = camp.getQuantity();
            dtm.addRow(row);
        }
        
    }
      
        public void refreshBloodbankTable(){
//        //DefaultTableModel dtm = (DefaultTableModel)bloodinventoryJTable.getModel();
//        dtm.setRowCount(0);
//        
//         for(BloodCollectionWorkRequest request : bloodorganization.getBloodbankrequest().getGetBloodWorkQueueList()){
//        for(Camp camp : enterprise.getCampDirectory().getCampList()){
//           if(request.getBloodtype()== camp.getBloodtype()){
//               
//           }
//        }
//        
//    }
        }
   public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)bloodrequestJTable.getModel();
        
        model.setRowCount(0);
        for(Organization organization :enterprise.getOrganizationDirectory().getOrganizationList())
            if(organization instanceof BloodbankReceptionOrganization)
            {
        
        
        for(RequestBloodWorkRequest request : organization.getReceiverRequestFromDoctor().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getBloodType();
            row[2] = request.getQty();
            row[3] = request.getStatus();
            row[4] = request.getSender();
            row[5] = request.getReceiver();
            
            
            model.addRow(row);
        }
            }
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bloodinventoryJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        valueLbl = new javax.swing.JLabel();
        Addcampbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bloodrequestJTable = new javax.swing.JTable();
        sendbloodBtn = new javax.swing.JButton();
        refreshInventory = new javax.swing.JButton();

        setBackground(new java.awt.Color(222, 248, 248));

        bloodinventoryJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Blood Type", "Quantity Available"
            }
        ));
        jScrollPane1.setViewportView(bloodinventoryJTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Enterprise:");

        valueLbl.setText("<value>");

        Addcampbtn.setText("Add Camp");
        Addcampbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddcampbtnActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ObjectModel/back.png"))); // NOI18N

        bloodrequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Blood Type", "Quantity Needed", "Status", "Sender", "Reciever"
            }
        ));
        jScrollPane2.setViewportView(bloodrequestJTable);

        sendbloodBtn.setBackground(new java.awt.Color(0, 102, 153));
        sendbloodBtn.setForeground(new java.awt.Color(255, 255, 255));
        sendbloodBtn.setText("Send Blood");
        sendbloodBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendbloodBtnActionPerformed(evt);
            }
        });

        refreshInventory.setBackground(new java.awt.Color(0, 153, 153));
        refreshInventory.setForeground(new java.awt.Color(255, 255, 255));
        refreshInventory.setText("Refresh Inventory");
        refreshInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshInventoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(755, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(valueLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Addcampbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(refreshInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendbloodBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(153, 153, 153))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(valueLbl)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(Addcampbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(refreshInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendbloodBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AddcampbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddcampbtnActionPerformed
        // TODO add your handling code here:
        
        BloodCampJPanel bcjp = new BloodCampJPanel(userProcessContainer, account, enterprise,this.bloodCollectionOrganization.getCollectionList());
        userProcessContainer.add("BloodCampJPanel", bcjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_AddcampbtnActionPerformed

    private void sendbloodBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendbloodBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = bloodrequestJTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"No Row selected");
            return;
        }
        
        RequestBloodWorkRequest request =(RequestBloodWorkRequest) bloodrequestJTable.getValueAt(selectedRow, 0);
        int bloodQuantityNeeded = Integer.parseInt(bloodrequestJTable.getValueAt(selectedRow, 2).toString());
        String bloodType = bloodrequestJTable.getValueAt(selectedRow, 1).toString();
        boolean flag = false;
       for(Camp camp1 : this.bloodCollectionOrganization.getCollectionList())
        {
            if(camp1.getBloodType().equals(bloodType))
            {
                flag = true;
                
                if(camp1.getQuantity() > bloodQuantityNeeded )
                {
               int qty = camp1.getQuantity() - bloodQuantityNeeded;
               camp1.setQuantity(qty);
               request.setStatus("Sent from col to rep");
               JOptionPane.showMessageDialog(null,"Blood sent to BloodBank Reception");
               break;
                }
                else
                    JOptionPane.showMessageDialog(null,"Requested quantity is more than available");
               // sendbloodBtn.setEnabled(false);
                break;
            }
            
         }
       if(flag==false)
       {
           JOptionPane.showMessageDialog(null, "Blood type not available in inventory");
       }
       populateBloodbankInventoryTable();
        
        
        
        
        
//        int bloodQuantityNeeded = Integer.parseInt(bloodrequestJTable.getValueAt(selectedRow, 2).toString());
//       GetBloodFromCollectionWorkRequest bloodrequest = (GetBloodFromCollectionWorkRequest)bloodrequestJTable.getValueAt(selectedRow, 0);
//       bloodrequest.setReceiver(account);
//       bloodrequest.setStatus("Completed");
//        String bloodType = bloodrequest.getBloodtype();
////           int qty1 = bloodrequest.getQty();
////        
//        for(Camp camp1 : this.bloodCollectionOrganization.getCollectionList())
//        {
//            if(camp1.getBloodType().equals(bloodType))
//            {
//               int qty = camp1.getQuantity() - bloodQuantityNeeded;
//               camp1.setQuantity(qty);
//               break;
//            }
//            
//        }
//       
//       
//        
//       refreshBloodbankTable();
        
        
    }//GEN-LAST:event_sendbloodBtnActionPerformed

    private void refreshInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshInventoryActionPerformed
       populateTable();  // TODO add your handling code here:
    }//GEN-LAST:event_refreshInventoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addcampbtn;
    private javax.swing.JTable bloodinventoryJTable;
    private javax.swing.JTable bloodrequestJTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshInventory;
    private javax.swing.JButton sendbloodBtn;
    private javax.swing.JLabel valueLbl;
    // End of variables declaration//GEN-END:variables


}

